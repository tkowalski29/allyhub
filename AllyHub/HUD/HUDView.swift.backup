import SwiftUI

struct HUDView: View {
    // MARK: - Properties
    @ObservedObject var timerModel: TimerModel
    @ObservedObject var tasksModel: TasksModel
    @ObservedObject var gradientSettings: GradientSettings
    
    let isExpanded: Bool
    let onExpand: () -> Void
    let onClose: () -> Void
    
    @State private var isHovering = false
    @State private var selectedTab: ExpandedTab = .tasks
    
    enum ExpandedTab: String, CaseIterable {
        case tasks = "Tasks"
        case settings = "Settings"
        
        var icon: String {
            switch self {
            case .tasks: return "checklist"
            case .settings: return "gearshape"
            }
        }
    }
    
    // MARK: - Initialization
    init(
        timerModel: TimerModel,
        tasksModel: TasksModel,
        gradientSettings: GradientSettings,
        isExpanded: Bool = false,
        onExpand: @escaping () -> Void,
        onClose: @escaping () -> Void
    ) {
        self.timerModel = timerModel
        self.tasksModel = tasksModel
        self.gradientSettings = gradientSettings
        self.isExpanded = isExpanded
        self.onExpand = onExpand
        self.onClose = onClose
    }
    
    // MARK: - Body
    var body: some View {
        ZStack {
            // Background with gradient or solid
            backgroundView
            
            // Main content
            if isExpanded {
                expandedView
            } else {
                compactView
            }
        }
        .frame(width: 300, height: isExpanded ? nil : 44)
        .onHover { hovering in
            withAnimation(.easeInOut(duration: 0.2)) {
                isHovering = hovering
            }
        }
    }
    
    // MARK: - Background
    private var backgroundView: some View {
        RoundedRectangle(cornerRadius: 12)
            .fill(isExpanded ? Color.black.opacity(0.9) : gradientSettings.selectedGradient.gradient)
            .shadow(color: .black.opacity(0.2), radius: 10, x: 0, y: 5)
            .overlay(
                RoundedRectangle(cornerRadius: 12)
                    .stroke(.white.opacity(0.1), lineWidth: 1)
            )
    }
    
    // MARK: - Compact View
    private var compactView: some View {
        HStack(spacing: 12) {
            if isHovering {
                // Show icons when hovering
                hoverControls
                    .transition(.scale.combined(with: .opacity))
            } else {
                // Show task and time when not hovering
                VStack(alignment: .leading, spacing: 2) {
                    Text(tasksModel.currentTaskTitle)
                        .font(.system(size: 12, weight: .medium))
                        .foregroundStyle(.white)
                        .lineLimit(1)
                        .truncationMode(.tail)
                    
                    Text(timerModel.formattedTime)
                        .font(.system(size: 16, weight: .semibold, design: .monospaced))
                        .foregroundStyle(.white)
                        .contentTransition(.numericText())
                }
                .transition(.scale.combined(with: .opacity))
                
                Spacer(minLength: 0)
            }
        }
        .padding(.horizontal, 12)
        .padding(.vertical, 8)
        .animation(.easeInOut(duration: 0.2), value: isHovering)
    }
    
    // MARK: - Expanded View
    private var expandedView: some View {
        VStack(spacing: 16) {
            // Top icons section
            topIconsBar
            
            // Timer and task info
            timerTaskSection
            
            // Tab view content
            tabContentView
                .frame(maxWidth: .infinity, maxHeight: .infinity)
            
            // Bottom tab selector
            bottomTabSelector
        }
        .padding(16)
    }
    
    private var topIconsBar: some View {
        HStack {
            hoverControls
            Spacer()
        }
    }
    
    private var timerTaskSection: some View {
        VStack(spacing: 8) {
            Text(tasksModel.currentTaskTitle)
                .font(.system(size: 18, weight: .semibold))
                .foregroundStyle(.white)
                .lineLimit(1)
            
            Text(timerModel.formattedTime)
                .font(.system(size: 24, weight: .bold, design: .monospaced))
                .foregroundStyle(.white)
                .contentTransition(.numericText())
        }
        .padding(.vertical, 8)
    }
    
    private var tabContentView: some View {
        TabView(selection: $selectedTab) {
            tasksTabView
                .tag(ExpandedTab.tasks)
            
            settingsTabView
                .tag(ExpandedTab.settings)
        }
        .tabViewStyle(.automatic)
    }
    
    private var tasksTabView: some View {
        ScrollView {
            LazyVStack(spacing: 8) {
                ForEach(Array(tasksModel.tasks.enumerated()), id: \.offset) { index, task in
                    HStack {
                        Text(task.title)
                            .foregroundStyle(.white)
                        Spacer()
                        if task.isCompleted {
                            Image(systemName: "checkmark.circle.fill")
                                .foregroundStyle(.green)
                        }
                    }
                    .padding(.horizontal, 12)
                    .padding(.vertical, 8)
                    .background(Color.white.opacity(0.1))
                    .cornerRadius(8)
                }
            }
        }
    }
    
    private var settingsTabView: some View {
        ScrollView {
            VStack(alignment: .leading, spacing: 16) {
                Text("Gradient Theme")
                    .font(.headline)
                    .foregroundStyle(.white)
                
                LazyVGrid(columns: Array(repeating: GridItem(.flexible()), count: 3), spacing: 12) {
                    ForEach(GradientSettings.GradientType.allCases) { gradientType in
                        Button(action: {
                            gradientSettings.setGradient(gradientType)
                        }) {
                            RoundedRectangle(cornerRadius: 8)
                                .fill(gradientType.gradient)
                                .frame(height: 50)
                                .overlay(
                                    RoundedRectangle(cornerRadius: 8)
                                        .stroke(gradientSettings.selectedGradient == gradientType ? .white : .clear, lineWidth: 2)
                                )
                                .overlay(
                                    Text(gradientType.name)
                                        .font(.caption)
                                        .foregroundStyle(.white)
                                        .fontWeight(.medium)
                                )
                        }
                        .buttonStyle(.plain)
                    }
                }
            }
            .padding()
        }
    }
    
    private var bottomTabSelector: some View {
        HStack(spacing: 0) {
            ForEach(ExpandedTab.allCases, id: \.self) { tab in
                Button(action: { selectedTab = tab }) {
                    VStack(spacing: 4) {
                        Image(systemName: tab.icon)
                            .font(.system(size: 16))
                        Text(tab.rawValue)
                            .font(.caption)
                    }
                    .foregroundStyle(selectedTab == tab ? .white : .white.opacity(0.6))
                    .frame(maxWidth: .infinity)
                    .padding(.vertical, 8)
                }
                .buttonStyle(.plain)
            }
        }
        .background(Color.white.opacity(0.1))
        .cornerRadius(10)
    }
    
    // MARK: - Timer Section (old)
    private var timerSection: some View {
        HStack(spacing: 12) {
            if isHovering {
                // Show icons when hovering
                hoverControls
                    .transition(.asymmetric(
                        insertion: .scale.combined(with: .opacity),
                        removal: .scale.combined(with: .opacity)
                    ))
            } else {
                // Show task and time when not hovering
                VStack(alignment: .leading, spacing: 2) {
                    Text(tasksModel.currentTaskTitle)
                        .font(.system(size: 12, weight: .medium))
                        .foregroundStyle(.primary)
                        .lineLimit(1)
                        .truncationMode(.tail)
                    
                    Text(timerModel.formattedTime)
                        .font(.system(size: 16, weight: .semibold, design: .monospaced))
                        .foregroundStyle(timerColor)
                        .contentTransition(.numericText())
                }
                .transition(.asymmetric(
                    insertion: .scale.combined(with: .opacity),
                    removal: .scale.combined(with: .opacity)
                ))
                
                Spacer(minLength: 0)
            }
        }
        .padding(.horizontal, 12)
        .padding(.vertical, 8)
        .frame(height: 44)  // Much smaller compact size
        .animation(.easeInOut(duration: 0.2), value: isHovering)
    }
    
    // MARK: - Hover Controls
    private var hoverControls: some View {
        HStack(spacing: 8) {
            // Expand button
            Button(action: onExpand) {
                Image(systemName: isExpanded ? "chevron.left" : "arrow.up.left.and.arrow.down.right")
                    .font(.system(size: 14, weight: .medium))
                    .foregroundColor(.white)
                    .frame(width: 28, height: 28)
                    .background(Color.white.opacity(0.2))
                    .clipShape(Circle())
            }
            .buttonStyle(.plain)
            
            // Next Task button
            Button(action: { tasksModel.nextTask() }) {
                Image(systemName: "arrow.right")
                    .font(.system(size: 14, weight: .medium))
                    .foregroundColor(.white)
                    .frame(width: 28, height: 28)
                    .background(Color.white.opacity(0.2))
                    .clipShape(Circle())
            }
            .buttonStyle(.plain)
            
            // Timer control button
            Button(action: { timerModel.toggle() }) {
                Image(systemName: timerModel.isRunning ? "pause.fill" : "play.fill")
                    .font(.system(size: 14, weight: .medium))
                    .foregroundColor(.white)
                    .frame(width: 28, height: 28)
                    .background(Color.white.opacity(0.2))
                    .clipShape(Circle())
            }
            .buttonStyle(.plain)
            
            // Close button
            Button(action: onClose) {
                Image(systemName: "xmark")
                    .font(.system(size: 14, weight: .medium))
                    .foregroundColor(.white)
                    .frame(width: 28, height: 28)
                    .background(Color.white.opacity(0.2))
                    .clipShape(Circle())
            }
            .buttonStyle(.plain)
        }
    }